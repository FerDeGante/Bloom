datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -- USERS --

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  phone        String?
  password     String
  role         String        @default("CLIENT")
  userPackages UserPackage[]
  reservations Reservation[]
  therapist    Therapist?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// -- THERAPISTS --

model Therapist {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty    String?
  isActive     Boolean             @default(true)
  reservations Reservation[]
  branches     TherapistOnBranch[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

// -- BRANCHES --

model Branch {
  id           String              @id @default(cuid())
  name         String              @unique
  address      String?
  phone        String?
  openHours    String?
  reservations Reservation[]
  therapists   TherapistOnBranch[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model TherapistOnBranch {
  id          String    @id @default(cuid())
  therapistId String
  branchId    String
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  branch      Branch    @relation(fields: [branchId], references: [id])
  // Optionally: workSchedule String? (for individual therapist/branch hours)
}

// -- PACKAGES --

model Package {
  id              String        @id @default(cuid())
  stripePriceId   String        @unique
  name            String
  workingDays     String
  workingHours    String
  saturdayHours   String?
  sundayHours     String?
  sessionDuration Int
  sessions        Int
  price           Int
  inscription     Int
  userPackages    UserPackage[]
  reservations    Reservation[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// -- USERPACKAGES --

model UserPackage {
  id                String        @id @default(cuid())
  userId            String
  packageId         String
  sessionsRemaining Int
  paymentSource     String        @default("stripe")
  user              User          @relation(fields: [userId], references: [id])
  package           Package       @relation(fields: [packageId], references: [id])
  reservations      Reservation[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// -- RESERVATIONS --

model Reservation {
  id            String    @id @default(cuid())
  userId        String
  packageId     String
  therapistId   String? // Optional for assignment later
  userPackageId String?
  branchId      String
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  paymentMethod String    @default("cash")
  paidAt        DateTime?

  user        User         @relation(fields: [userId], references: [id])
  package     Package      @relation(fields: [packageId], references: [id])
  therapist   Therapist?   @relation(fields: [therapistId], references: [id])
  userPackage UserPackage? @relation(fields: [userPackageId], references: [id], onDelete: Cascade)
  branch      Branch       @relation(fields: [branchId], references: [id])
}

// Reset password
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}
 
